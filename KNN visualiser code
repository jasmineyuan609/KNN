import numpy as np
import matplotlib.pyplot as plt
from matplotlib.colors import ListedColormap
import tkinter as tk
from tkinter import simpledialog

def euclidean_distance(p1, p2):
    return np.sqrt(np.sum((p1 - p2) ** 2))

def knn_predict(X_train, y_train, X_test, k=3):
    y_pred = []
    for test_point in X_test:
        distances = [euclidean_distance(test_point, train_point) for train_point in X_train]
        nearest_indices = np.argsort(distances)[:k]
        nearest_labels = y_train[nearest_indices]
        predicted_label = np.bincount(nearest_labels).argmax()
        y_pred.append(predicted_label)
    return np.array(y_pred)

def generate_data(num_clusters=2, num_points=100):
    np.random.seed(42)
    X, y = [], []
    centers = np.random.randn(num_clusters, 2) * 3
    points_per_cluster = num_points // num_clusters
    for i, center in enumerate(centers):
        X.append(np.random.randn(points_per_cluster, 2) + center)
        y += [i] * points_per_cluster
    return np.vstack(X), np.array(y)

def plot_knn_visualizer(k=3, num_clusters=2, num_points=100):
    X, y = generate_data(num_clusters, num_points)
    x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1
    y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1
    xx, yy = np.meshgrid(np.linspace(x_min, x_max, 100), np.linspace(y_min, y_max, 100))
    
    X_test = np.c_[xx.ravel(), yy.ravel()]
    Z = knn_predict(X, y, X_test, k)
    Z = Z.reshape(xx.shape)
    
    cmap_light = ListedColormap(['#FFAAAA', '#AAAAFF', '#AAFFAA', '#FFD700', '#FFA07A'])
    cmap_bold = ListedColormap(['#FF0000', '#0000FF', '#00FF00', '#FF8C00', '#8A2BE2'])
    plt.figure(figsize=(8, 6))
    plt.contourf(xx, yy, Z, alpha=0.3, cmap=cmap_light)
    
    scatter = plt.scatter(X[:, 0], X[:, 1], c=y, cmap=cmap_bold, edgecolor='k', s=50)
    plt.legend(handles=scatter.legend_elements()[0], labels=[f'Class {i}' for i in range(num_clusters)])
    plt.title(f'K-Nearest Neighbors (k={k}, clusters={num_clusters}, points={num_points})')
    plt.xlabel('Feature 1')
    plt.ylabel('Feature 2')
    plt.show()

def get_user_inputs():
    root = tk.Tk()
    root.withdraw()
    
    num_clusters = simpledialog.askinteger("Input", "Enter the number of clusters:", minvalue=2, maxvalue=5)
    if num_clusters is None:
        num_clusters = 2  # Default value if canceled
    
    num_points = simpledialog.askinteger("Input", "Enter the total number of points:", minvalue=50, maxvalue=500)
    if num_points is None:
        num_points = 100  # Default value if canceled
    
    k = simpledialog.askinteger("Input", "Enter the number of neighbors (k):", minvalue=1, maxvalue=10)
    if k is None:
        k = 3  # Default value if canceled
    
    plot_knn_visualizer(k=k, num_clusters=num_clusters, num_points=num_points)

if __name__ == "__main__":
    get_user_inputs()
