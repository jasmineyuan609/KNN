import numpy as np
import matplotlib.pyplot as plt
from matplotlib.colors import ListedColormap
import tkinter as tk
from tkinter import ttk

def euclidean_distance(p1, p2):
    return np.sqrt(np.sum((p1 - p2) ** 2))

def knn_predict(X_train, y_train, X_test, k=3):
    y_pred = []
    for test_point in X_test:
        distances = [euclidean_distance(test_point, train_point) for train_point in X_train]
        nearest_indices = np.argsort(distances)[:k]
        nearest_labels = y_train[nearest_indices]
        predicted_label = np.bincount(nearest_labels).argmax()
        y_pred.append(predicted_label)
    return np.array(y_pred)

def generate_data(num_clusters=2, num_points=100):
    np.random.seed(42)
    X, y = [], []
    centers = np.random.randn(num_clusters, 2) * 3
    points_per_cluster = num_points // num_clusters
    for i, center in enumerate(centers):
        X.append(np.random.randn(points_per_cluster, 2) + center)
        y += [i] * points_per_cluster
    return np.vstack(X), np.array(y)

def plot_knn_visualizer(k=3, num_clusters=2, num_points=100):
    X, y = generate_data(int(num_clusters), int(num_points))
    x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1
    y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1
    xx, yy = np.meshgrid(np.linspace(x_min, x_max, 100), np.linspace(y_min, y_max, 100))
    
    X_test = np.c_[xx.ravel(), yy.ravel()]
    Z = knn_predict(X, y, X_test, int(k))
    Z = Z.reshape(xx.shape)
    
    cmap_light = ListedColormap(['#FFAAAA', '#AAAAFF', '#AAFFAA', '#FFD700', '#FFA07A'])
    cmap_bold = ListedColormap(['#FF0000', '#0000FF', '#00FF00', '#FF8C00', '#8A2BE2'])
    plt.figure(figsize=(8, 6))
    plt.contourf(xx, yy, Z, alpha=0.3, cmap=cmap_light)
    
    scatter = plt.scatter(X[:, 0], X[:, 1], c=y, cmap=cmap_bold, edgecolor='k', s=50)
    plt.legend(handles=scatter.legend_elements()[0], labels=[f'Class {i}' for i in range(int(num_clusters))])
    plt.title(f'K-Nearest Neighbors (k={int(k)}, clusters={int(num_clusters)}, points={int(num_points)})')
    plt.xlabel('Feature 1')
    plt.ylabel('Feature 2')
    plt.show()

def update_plot():
    num_clusters = int(cluster_slider.get())
    num_points = int(points_slider.get())
    k = int(k_slider.get())
    plot_knn_visualizer(k=k, num_clusters=num_clusters, num_points=num_points)

def create_gui():
    global cluster_slider, points_slider, k_slider
    root = tk.Tk()
    root.title("KNN Visualizer Settings")
    
    ttk.Label(root, text="Number of Clusters").pack()
    cluster_slider = ttk.Scale(root, from_=2, to=5, orient='horizontal', length=300)
    cluster_slider.set(2)
    cluster_slider.pack()
    
    ttk.Label(root, text="Total Number of Points").pack()
    points_slider = ttk.Scale(root, from_=50, to=500, orient='horizontal', length=300)
    points_slider.set(100)
    points_slider.pack()
    
    ttk.Label(root, text="Number of Neighbors (k)").pack()
    k_slider = ttk.Scale(root, from_=1, to=10, orient='horizontal', length=300)
    k_slider.set(3)
    k_slider.pack()
    
    ttk.Button(root, text="Generate Visualization", command=update_plot).pack()
    
    root.mainloop()

if __name__ == "__main__":
    create_gui()

